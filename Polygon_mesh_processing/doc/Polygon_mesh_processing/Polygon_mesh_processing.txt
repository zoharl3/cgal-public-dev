namespace CGAL {
/*!
\mainpage User Manual
\anchor Chapter_PolygonMeshProcessing

\cgalAutoToc
\author ... Ilker %O. Yaz ...

\image html neptun_head.png
\image latex neptun_head.png
<BR>

\section PMPIntroduction Introduction
	
This package implements various methods for polygon mesh processing.
A "polygon mesh" is a consistent 
	\cgalCite{botsch2010PMP}

  This package follows the BGL API
  \todo add link to BGL package

\cgalFigureBegin{Mech_steps, mech_hole_horz.png}
Results of the main steps of the algorithm.
From left to right: the hole, after triangulation,
                              after triangulation and refinement,
                              after triangulation, refinement and fairing.
\cgalFigureEnd

****************************************
\section PMPMeshing Meshing
\subsection API

A surface patch can be refined by inserting new vertices and flipping edges to get a valid triangulation.
Using a criterion presented in \cgalCite{Lipea2003FillingHoles},
the density of triangles near the boundary of the patch is approximated by the refinement function.
The validity of the mesh is kept by flipping edges.
An edge is flipped only if the opposite edge does not exist in the original mesh
and if no degenerate triangles are produced.

A region of the surface mesh (e.g. the refined region) can be faired to obtain a tangentially continuous and smooth patch.
The fairing step minimizes a linear bi-Laplacian system with boundary constraints,
described in \cgalCite{Botsch2008OnLinearVariational}.
The visual results of aforementioned steps can be seen in \cgalFigureRef{Mech_steps} (c and d).

Refinement and fairing functions can be applied to an arbitrary region on a mesh , using :
- `CGAL::Polygon_mesh_processing::refine()` : given a set of facets on a mesh, refines the region.
- `CGAL::Polygon_mesh_processing::fair()` : given a set of vertices on a mesh, fairs the region.


Many algorithms only work for meshes in which all the faces have the same number of vertices,
or even only for triangle meshes. Hence, one may want to triangulate a polygon mesh
with any types of polygons as faces.
This package provides the function `CGAL::Polygon_mesh_processing::triangulate_faces()`
that triangulates all faces of the input polygon mesh.


\subsection Examples

\subsubsection MeshingExample_1 Refine and fair a region on a polygon mesh

The following example shows how to use the functions `CGAL::Polygon_mesh_processing::refine()`
and `CGAL::Polygon_mesh_processing::fair()` for some selected regions on the input polygon mesh.

\cgalExample{Polygon_mesh_processing/refine_fair_example.cpp}

\todo code : fair() makes the mesh disappear in this example

\subsubsection MeshingExample_2 Triangulate a polygon mesh

Triangulating a polygon mesh can be done with the function
`CGAL::Polygon_mesh_processing::triangulate_faces()`
as shown in the example below.

\cgalExample{Polygon_mesh_processing/triangulate_faces_example.cpp}

\todo code : this example does not terminate

********************************************
\section PMPHoleFilling Hole Filling

This package provides algorithms for filling a hole that is either in a triangulated surface mesh
or defined by a sequence of points that describe a polyline.
The main steps of the algorithm are described in \cgalCite{Lipea2003FillingHoles} and can be summarized as follows.

First, a triangular patch for the hole is generated without introducing any new vertex. 
The patch minimizes a quality function evaluated for all possible triangular patches.
The quality function first minimizes the worst dihedral angle between patch triangles, then the total surface area as a tiebreaker.
Following the suggestions in \cgalCite{Zou2013AnAlgorithm}, the performance of the algorithm is significantly improved
by narrowing the search space to faces of a 3D Delaunay triangulation of the border vertices,
from all possible patches, while searching for the best patch. 

Then, the generated patch can be refined and faired using the meshing functions
`CGAL::Polygon_mesh_processing::refine()` and `CGAL::Polygon_mesh_processing::fair()`
described in Section \ref PMPMeshing.


\subsection HoleFillingAPI API

This package provides four functions for hole filling:
	- `triangulate_hole_polyline()` : given a sequence of points defining the hole, triangulates the hole.
	- `triangulate_hole()` : given a border halfedge defining the hole on a mesh, triangulates the hole.
	- `triangulate_and_refine_hole()` : in addition to `triangulate_hole()` the generated patch is refined.
	- `triangulate_refine_and_fair_hole()` : in addition to `triangulate_and_refine_hole()` the generated patch is also faired.

\subsection HFExamples Examples

\subsubsection HFExample_1 Triangulate a polyline

The following example shows how to triangulate a hole described by an input polyline.

\cgalExample{Polygon_mesh_processing/triangulate_polyline_example.cpp}


\subsubsection HFExample_2 Hole filling from the border of the hole

If the input polygon mesh has a hole or more than one hole, it is possible
to iteratively fill them by detecting border edges (i.e. with only
one incident face) along the evolution of the mesh.

Holes are filled one after the other, and the process stops when there is no border edge left.

This process is illustrated by the example below, where holes are
iteratively filled, refined and faired to get a nicely smooth mesh with no hole.


\cgalExample{Polygon_mesh_processing/hole_filling_example.cpp}


\cgalFigureBegin{Max_refine, max_refine.png}
Result of refine example. 
\cgalFigureEnd

\cgalFigureBegin{Max_fair, max_fair.png}
Result of fairing example. 
\cgalFigureEnd

 \cgalFigureBegin{Triangulated_fork, fork.gif}
 Holes in fork model are filled with only triangulating.
 \cgalFigureEnd


***************************************
\section PMPPredicates Predicates

This packages provides some predicates to be evaluated with respect to a polygon mesh.

\subsection Orientation

The function `CGAL::Polygon_mesh_processing::is_outward_oriented()` checks whether 
the polygon mesh is oriented such that the normals to faces are oriented towards the
outside of the domain bounded by the input polygon mesh.

\todo talk about inside_out, from Polyhedron_3
\todo implement inside_out for PolygonMesh?

\subsubsection Example


\subsection PMPSelIntersections Self intersections

Self intersections can be detected and collected from a triangle mesh, using the two functions
`CGAL::Polygon_mesh_processing::is_self_intersecting()`
and `CGAL::Polygon_mesh_processing::self_intersections()`.

\subsubsection Example
\cgalExample{Polygon_mesh_processing/self_intersections_example.cpp}


\subsection InsideTest Inside test

The class `CGAL::Point_inside_polygon_mesh` provides a functor that tests whether a query point is 
inside, outside, or on the boundary of the domain described by a given closed polygon mesh.

\subsubsection Example
\cgalExample{Polygon_mesh_processing/point_inside_example.cpp}


****************************************
\section PMPRepairing Combinatorial Repairing 

\subsection Stitching
- \link stitching_grp `CGAL::Polygon_mesh_processing::stitch_borders()` \endlink

\subsubsection Example
\cgalExample{Polygon_mesh_processing/stitch_borders_example.cpp}


\subsection PolygonSoups Polygon soups
- `CGAL::Polygon_mesh_processing::orient_polygon_soup()`
- `CGAL::Polygon_mesh_processing::polygon_soup_to_polygon_mesh()`

\subsubsection Example
\cgalExample{Polygon_mesh_processing/polygon_soup_example.cpp}


****************************************
\section PMPNormalComp Normals Computation
\subsection API
- `CGAL::Polygon_mesh_processing::compute_face_normal()`
- `CGAL::Polygon_mesh_processing::compute_vertex_normal()`
- `CGAL::Polygon_mesh_processing::compute_normals()`
- `CGAL::Polygon_mesh_processing::compute_face_normals()`
- `CGAL::Polygon_mesh_processing::compute_vertex_normals()`

\subsection Example
\cgalExample{Polygon_mesh_processing/compute_normals_example.cpp}


****************************************
\section PMPSlicer Slicer
\subsection API
- `CGAL::Polygon_mesh_slicer`

\subsection Example
\cgalExample{Polygon_mesh_processing/mesh_slicer_example.cpp}

****************************************
\section PMPConnectedComponents Connected components
\subsection API
- `CGAL::Polygon_mesh_processing::keep_largest_connected_components()`
- `CGAL::Polygon_mesh_processing::connected_component()`
- `CGAL::Polygon_mesh_processing::connected_components()`

\subsection Examples
\cgalExample{Polygon_mesh_processing/connected_components_example.cpp}

*/
} /* namespace CGAL */
