/// \defgroup PkgPolygonMeshProcessing Polygon Mesh Processing Reference
/// \defgroup PkgPolygonMeshProcessingConcepts Concepts
/// \ingroup PkgPolygonMeshProcessing
/// \defgroup stitching_grp CGAL::Polygon_mesh_processing::stitch_borders()
/// \ingroup PkgPolygonMeshProcessing
 
/*!
\addtogroup PkgPolygonMeshProcessing
 
\cgalPkgDescriptionBegin{Polygon Mesh Processing, PkgPolygonMeshProcessingSummary}
\cgalPkgPicture{hole_filling_ico.png}
 
\cgalPkgSummaryBegin
\cgalPkgAuthor{Ilker O. Yaz}
\cgalPkgDesc{This package provides functionality to fill holes, refine and fair triangulated regions on surface mesh.}
\cgalPkgManuals{Chapter_PolygonMeshProcessing,PkgPolygonMeshProcessing}
\cgalPkgSummaryEnd
 
\cgalPkgShortInfoBegin
\cgalPkgSince{4.7}
\cgalPkgDependsOn{\ref PkgTriangulation3Summary, Sparse square solver such as those from  \ref thirdpartyEigen}
\cgalPkgBib{cgal-tmp}
\cgalPkgLicense{\ref licensesGPL "GPL"}
\cgalPkgDemo{Operations on Polyhedra,polyhedron_3.zip}
\cgalPkgShortInfoEnd
 
\cgalPkgDescriptionEnd

\cgalClassifedRefPages

## Meshing Functions ##
- `CGAL::Polygon_mesh_processing::fair()`
- `CGAL::Polygon_mesh_processing::refine()`
- `CGAL::Polygon_mesh_processing::triangulate_faces()`

## Hole Filling Functions ##
- `CGAL::Polygon_mesh_processing::triangulate_hole()`
- `CGAL::Polygon_mesh_processing::triangulate_and_refine_hole()`
- `CGAL::Polygon_mesh_processing::triangulate_refine_and_fair_hole()`
- `CGAL::Polygon_mesh_processing::triangulate_hole_polyline()`

## Predicate Functions and Classes ##
- `CGAL::Polygon_mesh_processing::is_self_intersecting()`
- `CGAL::Polygon_mesh_processing::self_intersections()`
- `CGAL::Point_inside_polygon_mesh`

## Orientation Functions ##
- `CGAL::Polygon_mesh_processing::is_outward_oriented()`
- `CGAL::Polygon_mesh_processing::reverse_face_orientations()`

## Combinatorial Repairing Functions ##
- \link stitching_grp `CGAL::Polygon_mesh_processing::stitch_borders()` \endlink
- `CGAL::Polygon_mesh_processing::polygon_soup_to_polygon_mesh()`
- `CGAL::Polygon_mesh_processing::orient_polygon_soup()`

## Normal Computation Functions ##
- `CGAL::Polygon_mesh_processing::compute_face_normal()`
- `CGAL::Polygon_mesh_processing::compute_vertex_normal()`
- `CGAL::Polygon_mesh_processing::compute_normals()`
- `CGAL::Polygon_mesh_processing::compute_face_normals()`
- `CGAL::Polygon_mesh_processing::compute_vertex_normals()`

## Other Classes and Functions ##
- `CGAL::Polygon_mesh_slicer`
- `CGAL::Polygon_mesh_processing::keep_largest_connected_components()`
- `CGAL::Polygon_mesh_processing::connected_component()`
- `CGAL::Polygon_mesh_processing::connected_components()`

\todo make template parameter names uniform in other packages using BGL. Here we chose PolygonMesh as template parameter.
It can be made short to PM. And TriangleMesh (or TM) specifies when the parameter should be a triangle mesh.
\todo document `BGL/include/CGAL/boost/graph/selection.h`
\todo document `BGL/include/CGAL/boost/graph/split_graph_into_polylines.h`
*/
