/*!
\defgroup namedparameters Named Parameters
\ingroup PkgPolygonMeshProcessing

\cgalHeading{How to use BGL Optional Named Parameters}

The notion of named parameters was introduced in the BGL. You can read about it the following site: http://www.boost.org/libs/graph/doc/bgl_named_params.html. Named parameters allow the user to specify only those parameters which are really needed, by name, making the parameter ordering unimportant.

Say there is a function `f()` that takes 3 parameters called name, age and gender, and you have variables `n`, `a` and `g` to pass as parameters to that function. Without named parameters, you would call it like this: `f(n,a,g)`, whereas with named parameters, you call it like this: `f(name(n).age(a).gender(g))`.

That is, you give each parameter a name by wrapping it into a function whose name matches that of the parameter. The entire list of named parameters is really a composition of function calls separated by a dot ( .). Thus, if the function takes a mix of mandatory and named parameters, you use a comma to separate the last non-named parameter from the first named parameters, like this:

`f(non_named_par0, non_named_pa1, name(n).age(a).gender(g))`

When you use named parameters, the ordering is irrelevant, so `f(name(n).age(a).gender(g))` is equivalent to `f(age(a).gender(g).name(n))`, and you can just omit any named parameter that has a default value.

The sequence of named parameters should start with `CGAL::parameters::`.


\cgalHeading{Example}

See below a sample call of a function that uses the optional BGL named parameters.

\code
/* pmesh : polygon mesh with patches to be refined
   faces : the range of faces defining the patches to refine
   faces_out : output iterator into which descriptors of new faces are put
   vertices_out : output iterator into which descriptors of new vertices are put
   vertex_point_map : the property map with the points associated to the vertices of `pmesh`
   density_control_factor : factor to control density of the output mesh
*/
refine(pmesh
       , faces
       , faces_out
       , vertices_out
       , CGAL::parameters::vertex_point_map(vpmap).density_control_factor(d));
\endcode




\cgalHeading{List of Available Named Parameters}

In this package, all functions optional parameters are implemented as BGL optional named parameters.

Since the parameters of the various polygon mesh processing functions defined in this
package are redundant, their long descriptions are centralized below.


\b Template \b Parameters

In the following, we assume that the following types are provided as template parameters of polygon mesh processing functions and classes. Note that, for some of these functions, the type is more specific.

<ul>
<li>`PolygonMesh` implements a `FaceGraph`
<li>`Kernel` a geometric traits class in which constructions are performed and predicates evaluated. Everywhere in this package, a \cgal `Kernel` fulfills the requirements.
</ul>


\b Named \b Parameters

\todo for each parameter, give info on the type and the default value

<ul>
<li> `vertex_point_map`. An instance of a class model of `ReadablePropertyMap` with
`boost::graph_traits<PolygonMesh>::%vertex_descriptor` as key type and
`Kernel::Point_3` as value type.

<li> `use_delaunay_triangulation`. A boolean. If `true`, use the Delaunay triangulation facet search space. Its default value is `true`.

<li> `density_control_factor`. A floating scalar value which controls the density of the mesh generated by refinement, and larger values cause denser refinements. The density of vertices in the refined region is this factor times higher than before refinement.
 Its default value is `CGAL::sqrt(2)`.

<li> `fairing_continuity`. An unsigned integer which controls the tangential continuity of the output surface for fairing. The possible values are 0, 1 and 2, refering to the C^0, C^1 and C^2 continuity. The default value is 1.

<li> `sparse_linear_solver`. An instance of a class model of `SparseLinearAlgebraTraitsWithFactor_d`.
 If \ref thirdpartyEigen "Eigen" 3.2 (or greater) is available and `CGAL_EIGEN3_ENABLED` is defined, then an overload of `Eigen_solver_traits` is provided as default value :\n
\code
CGAL::Eigen_solver_traits<
Eigen::SparseLU<
CGAL::Eigen_sparse_matrix<double>::EigenType,
Eigen::COLAMDOrdering<int> >  >
\endcode


</ul>

*/
