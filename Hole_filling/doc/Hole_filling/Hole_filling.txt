namespace CGAL {
/*!
\mainpage Hole Filling
\anchor Chapter_HoleFilling

\cgalAutoToc
\author ... Ilker %O. Yaz ...

\image html neptun_head.png
\image latex neptun_head.png
<BR>

\section HoleFillingIntroduction Introduction

This package provides set of algorithms for filling a hole that is either in a triangulated surface mesh (<B>mesh</B> in the following) or defined by sequence of points. 
The main steps of the algorithm are described in \cgalCite{Lipea2003FillingHoles} and can be summarized as follows.

First, a triangular patch for the hole is generated without introducing any new vertex. 
The provided algorithm is suggested in \cgalCite{Lipea2003FillingHoles} that finds the best patch among all possible patches by minimizing a quality function.
The quality function first minimizes the worst dihedral angle between patch triangles, then the total surface area as a tiebreaker.
Following the suggestions in \cgalCite{Zou2013AnAlgorithm}, performance of the algorithm is significantly improved 
by narrowing the search space to 3D Delaunay Triangulation of the border vertices, from all possible patches, while searching for the best patch. 

Second, generated patch is refined by creating new vertices to approximate density of near boundary triangles and flipping edges to obtain Delanuay-like triangulation.
Together with criteria presented in \cgalCite{Lipea2003FillingHoles}, 
an edge is only flipped if the opposite edge is not existing in the mesh and no degenerate triangle produced afterwards.

Third, refined region is faired to provide tangential continuous and smooth patch. 
The fairing step is default to minimizing a linear bi-Laplacian system with boundary constraints \cgalCite{Botsch2008OnLinearVariational}. 
The visual results of aforementioned steps can be seen in \cgalFigureRef{Mech_steps}

\cgalFigureBegin{Mech_steps, mech_hole_horz.png}
Results of the main steps of the algorithm. Respectively: the hole, after triangulation, after triangulation and refine, after triangulation, refine and fair.
\cgalFigureEnd

\section HoleFillingAPI API

This package provides four functions for hole filling:
	- `triangulate_hole_polyline()` : given a sequence of points defining the hole, triangulates the hole
	- `triangulate_hole()` : given a border halfedge defining the hole on a mesh, triangulates the hole
	- `triangulate_and_refine_hole()` : in addition to `triangulate_hole()` generated patch is also refined
	- `triangulate_refine_and_fair_hole()` : in addition to `triangulate_and_refine_hole()` generated patch is also faired
	
also for refining and fairing an arbitrary region on a mesh:
	- `refine()` : given a set of facets on a mesh, refines the region
	- `fair()` : given a set of vertices on a mesh, fairs the region
	
\subsection HoleFillingAPITriangulatePolyline Triangulate Polyline

The function `triangulate_hole_polyline()` can be used by providing a sequence of points defining the hole. Note that no degenerate triangle is produced as a result.

\subsubsection Example_1 Example: Triangulating Polyline
\cgalExample{Hole_filling/triangulate_polyline_example.cpp}



\subsubsection Example_2 Example: Refining a region on mesh
\todo is there a Nop_output_iterator somewhere in CGAL ?
\cgalExample{Hole_filling/refine_polyhedron_example.cpp}

\cgalFigureBegin{Max_refine, max_refine.png}
Result of refine example. 
\cgalFigureEnd

*/
 \cgalFigureBegin{Triangulated_fork, fork.gif}
 Holes in fork model are filled with only triangulating.
 \cgalFigureEnd
/*!
*/
} /* namespace CGAL */